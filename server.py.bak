from flask import Flask, render_template, jsonify, request, send_from_directory
import asyncio
from concurrent.futures import ThreadPoolExecutor
import asyncio, os
from dotenv import load_dotenv
from EnhancedQuantumTrading.core.data_collection import DataCollector
from EnhancedQuantumTrading.signal_analyzer import SignalAnalyzer
import random
import pandas as pd
import numpy as np
import json

# Load environment variables
load_dotenv()

app = Flask(__name__, static_folder='static', template_folder='templates')
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev_key_change_in_prod')

# Initialize the data collector and signal analyzer
data_collector = DataCollector()
signal_analyzer = SignalAnalyzer()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/market_data')
def market_data():
    symbols = request.args.get('symbols', 'BTC/USD,ETH/USD').split(',')
    # Get timeframe parameter with default of 1d
    timeframe = request.args.get('timeframe', '1d')
    
    data = {}
    
    # Get CEX data
    for symbol in symbols:
        if '/' in symbol:  # Handle as CEX symbol
            try:
                df = data_collector.fetch_market_data(symbol, timeframe)
                if df is not None and not df.empty:
                    data[f'cex_{symbol}'] = df.to_dict('records')
            except Exception as e:
                print(f"Error fetching CEX data for {symbol}: {e}")
        else:  # Handle as token address/symbol
            try:
                # For demo, generate some fake data if real data not available
                if random.random() > 0.7:  # Simulate some data fetch failures
                    dates = pd.date_range(start='2023-01-01', periods=100, freq='D')
                    prices = np.random.normal(100, 10, size=100).cumsum() + 1000
                    data[f'dex_{symbol}'] = [
                        {
                            'timestamp': d.strftime('%Y-%m-%d'),
                            'price': p,
                            'volume': random.randint(10000, 1000000)
                        } for d, p in zip(dates, prices)
                    ]
            except Exception as e:
                print(f"Error fetching DEX data for {symbol}: {e}")
    
    return jsonify(data)

@app.route('/api/available_symbols')
def available_symbols():
    # In a real app, this should query supported exchanges and tokens
    # For demo, return some hardcoded symbols
    symbols = {
        'cex': ['BTC/USD', 'ETH/USD', 'SOL/USD', 'XRP/USD', 'ADA/USD'],
        'dex': ['UNI', 'LINK', 'AAVE', 'MKR', 'SNX']
    }
    return jsonify(symbols)

@app.route('/api/chainlink_prices')
def chainlink_prices():
    try:
        price_feeds = data_collector.fetch_chainlink_prices()
        return jsonify(price_feeds)
    except Exception as e:
        print(f"Error fetching Chainlink prices: {e}")
        return jsonify({})

@app.route('/api/timeframes')
def timeframes():
    # Return available timeframes with their display names
    available_timeframes = {
        '1m': '1 Minute',
        '5m': '5 Minutes',
        '15m': '15 Minutes',
        '1h': '1 Hour',
        '4h': '4 Hours',
        '1d': '1 Day',
        '1w': '1 Week'
    }
    return jsonify(available_timeframes)

@app.route('/api/statistics')
def statistics():
    symbol = request.args.get('symbol')
    timeframe = request.args.get('timeframe', '1d')
    
    if not symbol:
        return jsonify({'error': 'Symbol parameter is required'})
    
    try:
        # For a real app, fetch actual statistics from your data sources
        # Here we'll generate mock statistics based on the symbol
        
        # Use the data collector to get some recent data if available
        df = None
        try:
            if '/' in symbol:  # CEX symbol
                df = data_collector.fetch_market_data(symbol, timeframe, limit=30)
            else:  # DEX token
                # This would use a token-specific data source in a real app
                pass
        except Exception as e:
            print(f"Error fetching data for statistics: {e}")
        
        # Generate statistical data
        if df is not None and not df.empty:
            last_price = float(df.iloc[-1]['close'])
            prev_day_price = float(df.iloc[-2]['close']) if len(df) > 1 else last_price
            high_24h = float(df['high'].max())
            low_24h = float(df['low'].min())
            volume_24h = float(df['volume'].sum())
            
            change_24h = last_price - prev_day_price
            change_24h_percent = (change_24h / prev_day_price) * 100 if prev_day_price > 0 else 0
        else:
            # Generate random statistics for demo purposes
            base_price = 100 if 'BTC' not in symbol else 30000
            if 'ETH' in symbol:
                base_price = 2000
            elif 'SOL' in symbol:
                base_price = 40
            
            last_price = base_price * (1 + random.uniform(-0.1, 0.1))
            change_24h = last_price * random.uniform(-0.05, 0.05)
            change_24h_percent = (change_24h / last_price) * 100
            high_24h = last_price * (1 + random.uniform(0.01, 0.07))
            low_24h = last_price * (1 - random.uniform(0.01, 0.07))
            volume_24h = base_price * 1000000 * random.uniform(0.5, 1.5)
        
        # Calculate additional statistics using the SignalAnalyzer
        advanced_stats = {}
        try:
            if df is not None and not df.empty:
                # Use some of the signal analyzer methods to get insights
                sentiment = signal_analyzer.get_market_sentiment(symbol) if hasattr(signal_analyzer, 'get_market_sentiment') else None
                if sentiment:
                    advanced_stats['sentiment'] = sentiment
                
                # Get price prediction if available
                prediction = signal_analyzer.predict_price(df) if hasattr(signal_analyzer, 'predict_price') else None
                if prediction:
                    advanced_stats['prediction'] = prediction
        except Exception as e:
            print(f"Error calculating advanced statistics: {e}")
        
        stats = {
            'symbol': symbol,
            'last_price': last_price,
            'change_24h': change_24h,
            'change_24h_percent': change_24h_percent,
            'high_24h': high_24h,
            'low_24h': low_24h,
            'volume_24h': volume_24h,
            **advanced_stats
        }
        
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)})


# Portfolio management API endpoints
@app.route('/api/portfolio/value')
def portfolio_value():
    # This would integrate with your portfolio manager in a real implementation
    return jsonify({
        'total': 125750.42,
        'change_24h': 2450.75,
        'change_24h_percent': 1.99,
        'cash_balance': 45320.18
    })

@app.route('/api/portfolio/positions')
def portfolio_positions():
    # This would integrate with your portfolio manager in a real implementation
    return jsonify([
        {
            'id': 1,
            'symbol': 'ETH/USD',
            'position_type': 'LONG',
            'entry_price': 3245.50,
            'current_price': 3318.75,
            'quantity': 15.5,
            'value': 51440.63,
            'unrealized_pnl': 1135.38,
            'unrealized_pnl_percent': 2.26,
            'stop_loss': 3100.00,
            'take_profit': 3500.00
        },
        {
            'id': 2,
            'symbol': 'BTC/USD',
            'position_type': 'LONG',
            'entry_price': 42100.25,
            'current_price': 43250.80,
            'quantity': 0.65,
            'value': 28113.02,
            'unrealized_pnl': 747.86,
            'unrealized_pnl_percent': 2.73,
            'stop_loss': 40000.00,
            'take_profit': 45000.00
        },
        {
            'id': 3,
            'symbol': 'SOL/USD',
            'position_type': 'SHORT',
            'entry_price': 105.75,
            'current_price': 101.20,
            'quantity': 85.0,
            'value': 8602.00,
            'unrealized_pnl': 386.75,
            'unrealized_pnl_percent': 4.71,
            'stop_loss': 115.00,
            'take_profit': 90.00
        }
    ])

@app.route('/api/portfolio/metrics')
def portfolio_metrics():
    # This would integrate with your portfolio manager in a real implementation
    return jsonify({
        'sharpe_ratio': 1.85,
        'sortino_ratio': 2.12,
        'max_drawdown': -12.4,
        'win_rate': 62.5,
        'profit_factor': 1.75,
        'avg_win': 3.2,
        'avg_loss': -1.8,
        'total_trades': 48,
        'profitable_trades': 30,
        'loss_trades': 18
    })

# Trading execution API endpoints
@app.route('/api/execute_flashloan', methods=['POST'])
def execute_flashloan():
    data = request.json
    
    if not data:
        return jsonify({'status': 'error', 'message': 'No data provided'}), 400
    
    # In a real implementation, this would call the trading_execution module
    try:
        # Create a ThreadPoolExecutor to run the async function
        with ThreadPoolExecutor() as executor:
            # Run the async function in the executor
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # This is a placeholder that would actually call your trading logic
            # result = loop.run_until_complete(
            #     trading_logic.execute_triple_flashloan(
            #         data['chain'],
            #         data['tokens'],
            #         data['amounts']
            #     )
            # )
            
            # Mock successful result for the frontend demo
            result = {
                'status': 'success',
                'chain': data.get('chain', 'polygon'),
                'tx_hash': '0x' + '0123456789abcdef' * 4
            }
            
            loop.close()
            
        return jsonify(result)
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/execute_sandwich', methods=['POST'])
def execute_sandwich():
    data = request.json
    
    if not data:
        return jsonify({'status': 'error', 'message': 'No data provided'}), 400
    
    # Mock successful result for the frontend demo
    result = {
        'status': 'success',
        'chain': data.get('chain', 'polygon'),
        'tx_hash': '0x' + '0123456789abcdef' * 4
    }
    
    return jsonify(result)

@app.route('/api/execute_mev', methods=['POST'])
def execute_mev():
    data = request.json
    
    if not data:
        return jsonify({'status': 'error', 'message': 'No data provided'}), 400
    
    # Mock successful result for the frontend demo
    result = {
        'status': 'success',
        'chain': data.get('chain', 'polygon'),
        'strategy': data.get('strategy', 'arbitrage'),
        'tx_hash': '0x' + '0123456789abcdef' * 4
    }
    
    return jsonify(result)

# Serve React app in production
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve(path):
    if path != "" and os.path.exists(os.path.join('frontend/build', path)):
        return send_from_directory('frontend/build', path)
    else:
        return send_from_directory('frontend/build', 'index.html')

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.getenv('PORT', 5000))) 